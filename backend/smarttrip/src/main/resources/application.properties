spring.application.name=smartTrip
#server.port=8080
app.page-size=10
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
dotenv.enabled=true

jwt.secret=${JWT_SECRET}

open-weather.api.key=${WEATHER_API_KEY}
open-weather.api.url=https://api.openweathermap.org/data/3.0/onecall
open-weather.api.units=metric

#Gemini API key
gemini.api.key=${GEMINI_API_KEY}

spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=100,expireAfterWrite=5s


# Google OAuth2 configuration
# === Google OAuth Client Info ===
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# Override default redirect URI to match your controller path
#spring.security.oauth2.client.registration.google.redirect-uri=https://smarttrip.duckdns.org/api/oauth2/callback/google

spring.security.oauth2.client.registration.google.redirect-uri=https://smarttrip.duckdns.org/login/oauth2/code/google

spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
